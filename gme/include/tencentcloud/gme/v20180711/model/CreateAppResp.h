/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_GME_V20180711_MODEL_CREATEAPPRESP_H_
#define TENCENTCLOUD_GME_V20180711_MODEL_CREATEAPPRESP_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>
#include <tencentcloud/core/AbstractModel.h>
#include <tencentcloud/gme/v20180711/model/RealtimeSpeechConf.h>
#include <tencentcloud/gme/v20180711/model/VoiceMessageConf.h>
#include <tencentcloud/gme/v20180711/model/VoiceFilterConf.h>


namespace TencentCloud
{
    namespace Gme
    {
        namespace V20180711
        {
            namespace Model
            {
                /**
                * Output parameters of `CreateApp`
                */
                class CreateAppResp : public AbstractModel
                {
                public:
                    CreateAppResp();
                    ~CreateAppResp() = default;
                    void ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const;
                    CoreInternalOutcome Deserialize(const rapidjson::Value &value);


                    /**
                     * 获取App ID, automatically generated by the backend.
                     * @return BizId App ID, automatically generated by the backend.
                     */
                    uint64_t GetBizId() const;

                    /**
                     * 设置App ID, automatically generated by the backend.
                     * @param BizId App ID, automatically generated by the backend.
                     */
                    void SetBizId(const uint64_t& _bizId);

                    /**
                     * 判断参数 BizId 是否已赋值
                     * @return BizId 是否已赋值
                     */
                    bool BizIdHasBeenSet() const;

                    /**
                     * 获取App name, the input of `AppName`.
                     * @return AppName App name, the input of `AppName`.
                     */
                    std::string GetAppName() const;

                    /**
                     * 设置App name, the input of `AppName`.
                     * @param AppName App name, the input of `AppName`.
                     */
                    void SetAppName(const std::string& _appName);

                    /**
                     * 判断参数 AppName 是否已赋值
                     * @return AppName 是否已赋值
                     */
                    bool AppNameHasBeenSet() const;

                    /**
                     * 获取Project ID, the input of `ProjectId`.
                     * @return ProjectId Project ID, the input of `ProjectId`.
                     */
                    uint64_t GetProjectId() const;

                    /**
                     * 设置Project ID, the input of `ProjectId`.
                     * @param ProjectId Project ID, the input of `ProjectId`.
                     */
                    void SetProjectId(const uint64_t& _projectId);

                    /**
                     * 判断参数 ProjectId 是否已赋值
                     * @return ProjectId 是否已赋值
                     */
                    bool ProjectIdHasBeenSet() const;

                    /**
                     * 获取App key, used to initialize GME SDK.
                     * @return SecretKey App key, used to initialize GME SDK.
                     */
                    std::string GetSecretKey() const;

                    /**
                     * 设置App key, used to initialize GME SDK.
                     * @param SecretKey App key, used to initialize GME SDK.
                     */
                    void SetSecretKey(const std::string& _secretKey);

                    /**
                     * 判断参数 SecretKey 是否已赋值
                     * @return SecretKey 是否已赋值
                     */
                    bool SecretKeyHasBeenSet() const;

                    /**
                     * 获取Timestamp, indicating when the service is created.
                     * @return CreateTime Timestamp, indicating when the service is created.
                     */
                    uint64_t GetCreateTime() const;

                    /**
                     * 设置Timestamp, indicating when the service is created.
                     * @param CreateTime Timestamp, indicating when the service is created.
                     */
                    void SetCreateTime(const uint64_t& _createTime);

                    /**
                     * 判断参数 CreateTime 是否已赋值
                     * @return CreateTime 是否已赋值
                     */
                    bool CreateTimeHasBeenSet() const;

                    /**
                     * 获取Configuration information of voice chat
                     * @return RealtimeSpeechConf Configuration information of voice chat
                     */
                    RealtimeSpeechConf GetRealtimeSpeechConf() const;

                    /**
                     * 设置Configuration information of voice chat
                     * @param RealtimeSpeechConf Configuration information of voice chat
                     */
                    void SetRealtimeSpeechConf(const RealtimeSpeechConf& _realtimeSpeechConf);

                    /**
                     * 判断参数 RealtimeSpeechConf 是否已赋值
                     * @return RealtimeSpeechConf 是否已赋值
                     */
                    bool RealtimeSpeechConfHasBeenSet() const;

                    /**
                     * 获取Configuration information of voice messaging and speech-to-text
                     * @return VoiceMessageConf Configuration information of voice messaging and speech-to-text
                     */
                    VoiceMessageConf GetVoiceMessageConf() const;

                    /**
                     * 设置Configuration information of voice messaging and speech-to-text
                     * @param VoiceMessageConf Configuration information of voice messaging and speech-to-text
                     */
                    void SetVoiceMessageConf(const VoiceMessageConf& _voiceMessageConf);

                    /**
                     * 判断参数 VoiceMessageConf 是否已赋值
                     * @return VoiceMessageConf 是否已赋值
                     */
                    bool VoiceMessageConfHasBeenSet() const;

                    /**
                     * 获取Configuration information of phrase analysis
                     * @return VoiceFilterConf Configuration information of phrase analysis
                     */
                    VoiceFilterConf GetVoiceFilterConf() const;

                    /**
                     * 设置Configuration information of phrase analysis
                     * @param VoiceFilterConf Configuration information of phrase analysis
                     */
                    void SetVoiceFilterConf(const VoiceFilterConf& _voiceFilterConf);

                    /**
                     * 判断参数 VoiceFilterConf 是否已赋值
                     * @return VoiceFilterConf 是否已赋值
                     */
                    bool VoiceFilterConfHasBeenSet() const;

                private:

                    /**
                     * App ID, automatically generated by the backend.
                     */
                    uint64_t m_bizId;
                    bool m_bizIdHasBeenSet;

                    /**
                     * App name, the input of `AppName`.
                     */
                    std::string m_appName;
                    bool m_appNameHasBeenSet;

                    /**
                     * Project ID, the input of `ProjectId`.
                     */
                    uint64_t m_projectId;
                    bool m_projectIdHasBeenSet;

                    /**
                     * App key, used to initialize GME SDK.
                     */
                    std::string m_secretKey;
                    bool m_secretKeyHasBeenSet;

                    /**
                     * Timestamp, indicating when the service is created.
                     */
                    uint64_t m_createTime;
                    bool m_createTimeHasBeenSet;

                    /**
                     * Configuration information of voice chat
                     */
                    RealtimeSpeechConf m_realtimeSpeechConf;
                    bool m_realtimeSpeechConfHasBeenSet;

                    /**
                     * Configuration information of voice messaging and speech-to-text
                     */
                    VoiceMessageConf m_voiceMessageConf;
                    bool m_voiceMessageConfHasBeenSet;

                    /**
                     * Configuration information of phrase analysis
                     */
                    VoiceFilterConf m_voiceFilterConf;
                    bool m_voiceFilterConfHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_GME_V20180711_MODEL_CREATEAPPRESP_H_
